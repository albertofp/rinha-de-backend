basePath: /
definitions:
  models.CountResponse:
    properties:
      count:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  models.PersonCreateRequest:
    properties:
      apelido:
        type: string
      nascimento:
        type: string
      nome:
        type: string
      stack:
        items:
          type: string
        type: array
    type: object
  models.PersonCreateResponse:
    properties:
      id:
        type: string
      message:
        type: string
    type: object
  models.PersonDTO:
    properties:
      apelido:
        type: string
      id:
        type: string
      nascimento:
        type: string
      nome:
        type: string
      stack:
        items:
          type: string
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: albertopluecker@gmail.com
    name: Alberto F. Pluecker
    url: https://github.com/albertofp
  description: Docs auto-generated by Swagger
  license:
    name: MIT
  termsOfService: http://swagger.io/terms/
  title: Rinha de Backend Q3 2023 - Alberto Pluecker
  version: "1.0"
paths:
  /contagem-pessoas:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CountResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Count total amount of people in the database
      tags:
      - count
  /getall:
    get:
      description: Returns an empty array if no people found.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PersonDTO'
            type: array
      summary: Get every person in the database
      tags:
      - getall
  /pessoas:
    get:
      description: Search for a person in database by a given query string. Search
        term must not be empty
      parameters:
      - description: Search term
        in: query
        name: t
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PersonDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Search by term
      tags:
      - pessoas
    post:
      consumes:
      - application/json
      description: Adds a person to the database.  Returns an error if another person
        with the same value for the "apelido" field exists. Apelido and Nome have
        to be strings of length up to 32 and 100, respectively.  Nascimento has to
        follow date format YYYY-MM-DD. Stack is optional, but each entry contained
        has to be a string of up to 32 chars in length.
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.PersonCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PersonCreateResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create new person document
      tags:
      - pessoas
  /pessoas/{id}:
    get:
      description: Returns a person with the given id (UUID format)
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PersonDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Search person by ID
      tags:
      - pessoas
  /status:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: Health check
      tags:
      - status
swagger: "2.0"
